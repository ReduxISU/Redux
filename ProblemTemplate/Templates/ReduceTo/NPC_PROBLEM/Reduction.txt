using API.Interfaces;
using API.Problems.NPComplete.NPC_{REDUCE_TO};

namespace API.Problems.NPComplete.NPC_{REDUCE_FROM}.ReduceTo.NPC_{REDUCE_TO};

class {REDUCTION_PASCEL_CASE} : IReduction<{REDUCE_FROM}, {REDUCE_TO}> {

    // --- Fields ---
    private string _reductionName = "{REDUCTION}";
    private string _reductionDefinition = "TODO";
    private string _source = "TODO";
    private string[] _contributers = { "TODO" };
    private Dictionary<Object, Object> _gadgetMap = new Dictionary<Object, Object>();

    private {REDUCE_FROM} _reductionFrom;
    private {REDUCE_TO} _reductionTo;


    // --- Properties ---
    public string reductionName {
        get {
            return _reductionName;
        }
    }
    public string reductionDefinition {
        get {
            return _reductionDefinition;
        }
    }
    public string source {
        get {
            return _source;
        }
    }
    public string[] contributers{
        get{
            return _contributers;
        }
    }
    public Dictionary<Object, Object> gadgetMap {
        get{
            return _gadgetMap;
        }
        set{
            _gadgetMap = value;
        }
    }
    public {REDUCE_FROM} reductionFrom {
        get {
            return _reductionFrom;
        }
        set {
            _reductionFrom = value;
        }
    }
    public {REDUCE_TO} reductionTo {
        get {
            return _reductionTo;
        }
        set {
            _reductionTo = value;
        }
    }

    // --- Methods Including Constructors ---
    public {REDUCTION_PASCEL_CASE}({REDUCE_FROM} from) {
        _reductionFrom = from;
        _reductionTo = reduce();
    }

    public {REDUCE_TO} reduce() {
        {REDUCE_FROM} {REDUCE_FROM}Instance = _reductionFrom;
        {REDUCE_TO} {REDUCE_TO}Instance = new {REDUCE_TO}();
        
        // TODO: implement reduction {REDUCTION} from {REDUCE_FROM} to {REDUCE_TO}

        return {REDUCE_TO}Instance;
    }

    public string mapSolutions({REDUCE_FROM} problemFrom, {REDUCE_TO} problemTo, string problemFromSolution){
        // Verifies that the specified solution is valid for {REDUCE_FROM}
        if(!problemFrom.defaultVerifier.verify(problemFrom, problemFromSolution)) {
            return "Solution is incorrect";
        }

        // TODO: implement reduction mapped solution {REDUCTION} from {REDUCE_FROM} to {REDUCE_TO}

        return "TODO";
    }
}
